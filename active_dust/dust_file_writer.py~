import numpy as np
from scipy import interpolate
import matplotlib.pyplot as plt
import os
from hyperion.dust import IsotropicDust
from astropy import constants
from astropy import units as u

def find_nearest(array,value):
    idx = (np.abs(np.array(array)-value)).argmin()
    return idx

def Q_unit_transform(Q):
	# wavelength [micron] -> 1/wavelength [1/micron]
	# linear -> log10 
	Q[:,0] = np.log10(1/Q[:,0])
	Q[:,1] = np.log10(Q[:,1])
	return Q

def Q_interp_wl(wlen,Q0):
	Q = interpolate.interp1d(Q0[:,0],Q0[:,1],fill_value='extrapolate')
	Q_wl = Q(wlen)
	return Q_wl

def Qext_tab_load(fin_xtab = 'grain_size.txt',fin_gra='Gra_Optical/Gra_LD93_',fin_sil='Sil_Optical/Sil_LD93_'):
	# Return
	#  xtab, tuple Qtab = (Qabs_C, Qabs_Si, Qsca_C, Qsca_Si)
	xtab = np.log10(np.loadtxt(fin_xtab))
	ntab = len(xtab)
	Qabs_C = [[] for i in range(ntab)]
	Qsca_C = [[] for i in range(ntab)]
	Qabs_Si = [[] for i in range(ntab)]
	Qsca_Si = [[] for i in range(ntab)]

	# read Qext tables into arrays
	for i in range(ntab):
		num = str(i).zfill(2)
		Qabs_C[i] = np.loadtxt(fin_gra + num,usecols=(0,1))
		Qabs_C[i] = Q_unit_transform(Qabs_C[i])
		Qabs_Si[i] = np.loadtxt(fin_sil + num,usecols=(0,1))
		Qabs_Si[i] = Q_unit_transform(Qabs_Si[i])
		Qsca_C[i] = np.loadtxt(fin_gra + num,usecols=(0,2))
		Qsca_C[i] = Q_unit_transform(Qsca_C[i])
		Qsca_Si[i] = np.loadtxt(fin_sil + num,usecols=(0,2))
		Qsca_Si[i] = Q_unit_transform(Qsca_Si[i])

	return xtab,(Qabs_C,Qabs_Si,Qsca_C,Qsca_Si)


def Qext_get(x,wlen,cfrac,xtab,Qtab):
	# Input
	#  x: array of log10(grain_radii) of the simulation
	#  wlen: wavelengths of desired extinction curve
	#  cfrac: mass fraction of graphite
	#  xtab: array of log10(grain_radii) of the optical property table
    #  Qtab: tabulated extinction coefficient
	# Return
	#  tuple (Q_absorption, Q_scatter)

	ntab = len(xtab)
	dim = (len(x),len(wlen)) # dim: wavelength x grain size
	wlen = np.log10(1. / wlen)
	print(wlen)

	# original tables
	Qabs_C,Qabs_Si,Qsca_C,Qsca_Si = Qtab[0],Qtab[1],Qtab[2],Qtab[3]

	# extended in wlen
	Qabs_C_wl = np.zeros((ntab,dim[1]))
	Qsca_C_wl = np.zeros((ntab,dim[1]))
	Qabs_Si_wl = np.zeros((ntab,dim[1]))
	Qsca_Si_wl = np.zeros((ntab,dim[1]))

	# fully extended table (additionally extended in grain size)
	Qabs_C_2D = np.zeros(dim)
	Qsca_C_2D = np.zeros(dim)
	Qabs_Si_2D = np.zeros(dim)
	Qsca_Si_2D = np.zeros(dim)


	# align arrays across grain sizes by linear interpolation
	for i in range(ntab):
		Qabs_C_wl[i,:] = Q_interp_wl(wlen,Qabs_C[i])
		Qabs_Si_wl[i,:] = Q_interp_wl(wlen,Qabs_Si[i])
		Qsca_C_wl[i,:] = Q_interp_wl(wlen,Qsca_C[i])
		Qsca_Si_wl[i,:] = Q_interp_wl(wlen,Qsca_Si[i])

	# bilinear interpolate to obtain the extended table
	for i in range(dim[1]):
		Q = interpolate.interp1d(xtab,Qabs_C_wl[:,i],fill_value='extrapolate')
		Qabs_C_2D[:,i] = Q(x)
		Q = interpolate.interp1d(xtab,Qabs_Si_wl[:,i],fill_value='extrapolate')
		Qabs_Si_2D[:,i] = Q(x)
		Q = interpolate.interp1d(xtab,Qsca_C_wl[:,i],fill_value='extrapolate')
		Qsca_C_2D[:,i] = Q(x)
		Q = interpolate.interp1d(xtab,Qsca_Si_wl[:,i],fill_value='extrapolate')
		Qsca_Si_2D[:,i] = Q(x)


	return (cfrac*10**Qabs_C_2D + (1.0-cfrac)*10**Qabs_Si_2D, cfrac*10**Qsca_C_2D + (1.0-cfrac)*10**Qsca_Si_2D)



def extinction_law(x,dsf,wlen,cfrac,t_Qext,t_Qext_V):
	# Input
	#  x: array of log10(grain_radii) of the simulation
	#  dsf: counts (not mass!) of dust grains within bins with centers x
	#  wlen: wavelengths of desired extinction curve
	#  cfrac: mass fraction of graphite
    #  t_Qext: tuple (Q_absorption, Q_scatter)
	# return
	#   A/Av, R (albedo)

	a = 10**x
	Qabs, Qsca = t_Qext[0], t_Qext[1]
	Qabs_V, Qsca_V = t_Qext_V[0].transpose()[0], t_Qext_V[0].transpose()[0]
	Qext = Qabs + Qsca
	Qext_V = Qabs_V + Qsca_V
		
	A = np.zeros(len(wlen))
	Asca = np.zeros(len(wlen))
	Av = 2.5 * np.log10(np.e) * np.pi * np.sum(Qext_V*a**2*dsf)
	for i in range(len(wlen)):
		Asca[i] = 2.5 * np.log10(np.e) * np.pi * np.sum(Qsca[:,i]*a**2*dsf)
		A[i] = 2.5 * np.log10(np.e) * np.pi * np.sum(Qext[:,i]*a**2*dsf)
	R = Asca / A
	A #/= Av
	print(Av)
	return A, R



if __name__ == "__main__":
    
        
        min_grain_size_range = -4 #log, micron
        max_grain_size_range = 0 #log, micron
        wavelengths = 1. / np.logspace(0,1,201) *u.micron
        nu = (constants.c/wavelengths).to(u.Hz)



        cfrac = 0.54
        nbins = 25

        x_cent_array = np.linspace(min_grain_size_range,max_grain_size_range,nbins)
        Aext_array = np.zeros([len(wavelengths.value),nbins])
        frac = np.zeros(nbins)
        for i in range(nbins-1):
            size_bin_left_edge_array = np.linspace(x_cent_array[i],x_cent_array[i+1],41)#this 41 is hard coded to change it need to recompute t_Qext and t_qext_v
            
            temp_dsf = np.repeat(1.e59,len(size_bin_left_edge_array))
            
            xtab, Qtab = Qext_tab_load()
            t_Qext = Qext_get(size_bin_left_edge_array,wavelengths.value,cfrac,xtab,Qtab)
            t_Qext_V = Qext_get(size_bin_left_edge_array,np.array([0.551]),cfrac,xtab,Qtab)
            
            temp_Aext,temp_albedo = extinction_law(size_bin_left_edge_array,temp_dsf,wavelengths.value,cfrac,t_Qext,t_Qext_V)
            
            #saving the collection of Aext values
            Aext_array[:,i] = temp_Aext
            
            #convert Aext to kappa

            d = IsotropicDust(nu.value,temp_albedo,kappa.value)
            


        if not os.path.exists('dust_files/'):
            os.makedirs('dust_files/')

        


        #save the bin left edges (but not the last one since that's actualy a right edge)
        np.savetxt('grain_bin_sizes.txt',size_bin_left_edge_array[:-1])
        
